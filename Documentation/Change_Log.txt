10/08/2013 : remplacement des parties de la libc écrites à la main par NewLib

21/08/2013 :
- rétablissement de la libc custom, NewLib est impossible à maintenir
- ajout du symbole _end au linker script des applications. Ce symbole permet de connaître la fin du programme depuis le binaire (utile pour malloc())

22/08/2013 :
- changement du point d'entrée et de l'adresse de chargement des programmes userspace : maintenant 256 octets sont réservés aux arguments de la ligne de commande et le tas est situé après le code
- réécriture de KernelStartProgram() en assembleur "gcc"
- réécriture optimisée de la fonction SystemCall() de Libraries (évite de copier eax dans une variable et de retourner la variable)
- suppression du type bool du noyau (inutile)
- ajout fichier Strings.h pour plus de cohérence
- réécriture ShellCommandRenameFile() pour fournir plus de messages d'erreur

23/08/2013 :
- ajout du syscall SYSTEM_CALL_GET_USER_MEMORY_SIZE pour permettre à malloc() d'ajuster dynamiquement la taille du tas au démarrage d'un programme
- implémentation du tas situé après les données du programme
- début modification des arguments de la ligne de commande passés par le shell à un programme

24/08/2013 :
- suite et fin modif arguments ligne de commande

08/09/2013 :
- putchar() et puts() sont maintenant 100% conformes à POSIX 1003.1
- ajout de l'appel système FileRead() qui remplace FileReadNextBlock(), ce qui simplifie énormément le code du noyau, des bibliothèques, des appels système et des applications userspace
- modif du type FILE dans la libc pour stocker uniquement l'index du descripteur de fichier
- modif de fopen(), fread() et fclose() pour gérer le nouveau syscall et le nouveau type FILE
- ajout du support des fichiers à fgets()
- ajout d'une version minimale de fscanf() supportant seulement %d
- ajout des fonctions isspace() et isdigit() de la bibliothèque ctype (et ajout du header de la bibliothèque)

09/09/2013 :
- fin de l'implémentation de "%d" dans fscanf()

10/09/2013 :
- début de l'ajout du syscall FileWrite()
- modification de FileOpen() et FileClose() pour intégrer FileWrite()
- ajout du test de checksum pour le syscall FileRead() parmi les applications

11/09/2013 :
- amélioration de FileLoad() :
  # évite de charger un fichier de taille supérieure à la RAM
  # ne fait rien lorsqu'un fichier a une taille nulle
  # si demandé, charge le premier bloc du fichier et teste la présence du magic number des programmes avant de continuer à charger le fichier (si le magic number est absent, une erreur est retournée et le fichier n'est pas chargé) => plus besoin de charger un fichier en entier pour déterminer si c'est un programme ou non
- amélioration de la fonction de lancement de programme du shell pour éviter de lancer le contenu précédent de la mémoire lorsqu'un fichier vide est chargé
- suppression des appels système FileLoad() et FileCreate(), redondants avec FileOpen(), FileClose(), FileRead() et FileWrite()
- l'appel d'un syscall inexistant renvoie -1
- la commande de téléchargement du shell ne télécharge plus de fichiers vides ni de fichiers de taille supérieure à la RAM userspace (modification du serveur pour implémenter ce comportement)

20/09/2013 :
- changement du code de chargement du TSS en code assembleur GCC

28/09/2013 :
- sauvegarde de la version 2.0.4 du système, passage à la version 2.1.0 (ci-dessous les principaux changements à réaliser)
  # makefile dans le dossier racine qui permet de compiler facilement le système (make clean suivi de make) => suppression du script Create_Release.sh
  # le nouveau makefile permet de sélectionner facilement la langue de compilation de tout le système
  # nouvel installateur plus simple à maintenir et entièrement réécrit pour se débarrasser de l'installateur actuel rapidement bricolé
    + le MBR sera capable de charger plus de 64 Ko en mémoire (mais pas plus d'1 Mo car 16 bits), l'installateur se chargera à l'adresse 10000h pour éviter les problèmes d'alignement
  # rajout du support du timer 2 (fréquence programmable) pour disposer d'un timer et accessoirement activer le haut parleur du PC

29/09/2013 :
- amélioration du makefile du système pour éviter de tout recompiler à chaque fois (rajout du dossier Objects, création de dépendances propres, rajout du support des langues à la compilation)
- déplacement des chaînes contenues dans la commande "help" du shell dans "Strings.h"
- rajout du support des langues dans les Libraries (même si c'est inutilisé pour l'instant)
- création du makefile principal destiné à remplacer Create_Release.sh

12/12/2013 :
- passage à la version 2.1.1 du système, première fois que le terme Minimal Implementation Architecture (MiA) est apparu dans les sources (précisément dans l'en-tête doxygen de Kernel.h)
- changement des commentaires doxygen qui se trouvent en en-tête des fichiers .c pour que la documentation du module ne se trouve plus que dans les .h (simplifie la maintenance)
- suppression de Console.c et Console.h, création de Screen.c et Screen.h qui gèrent désormais toutes les fonctions liées à l'affichage. Le module Keyboard contient maintenant la fonction KeyboardReadString()
- nettoyage des fonctions liées à l'ancien module Console
- rajout du symbole DOXYGEN dans le doxyfile du système (permet d'utiliser #ifdef DOXYGEN dans les sources pour modifier la documentation générée par Doxygen)
- ajout d'un appel système permettant de copier un buffer représentant l'écran dans la mémoire vidéo en attendant le signal VSync dans le but d'éviter l'apparition d'artefacts désagréables sur l'écran (permettra de gérer une interface "graphique" depuis l'userspace et de faire des jeux)

13/12/2013 :
- System : renommage des constantes représentant les appels systèmes dans le noyau pour plus de clarté et réorganisation dans System_Calls.c/h
- System : renommage de KeyboardReadKey() en KeyboardReadChar() pour que les API soient unifiées
- System : utilisation d'un type pour représenter un handler d'interruption dans System_Calls
- System : utilisation de pointeurs void * dans System_Calls à la place de String_1 et String_2 pour éviter un grand nombre de casts
- Libraries : modification du System.h des Libraries pour inclure directement System_Calls.h du système (évite d'avoir deux définitions des appels système)
- ajout de la copie du fichier System_Calls.h dans le script Create_SDK.sh en attendant que le makefile principal s'en charge
- Libraries : il n'est pas possible de mettre une macro à la place de la fonction SystemCall() des Libraries car il faudrait un 5ème paramètre de retour dont l'opérande serait forcément une adresse mémoire et cela ne serait pas pratique du tout à manipuler
- System : bugfix probable de la fonction SystemCall() car certains registres n'étaient pas sauvegardés avant l'appel
- Libraries : rajout du symbole DOXYGEN dans le doxyfile des Libraries (permet d'utiliser #ifdef DOXYGEN dans les sources pour modifier la documentation générée par Doxygen)
- Libraries : séparation du module Console en deux modules appelés Screen et Keyboard pour conserver des appels systèmes unifiés et orientés périphériques
- Libraries : rajout de la fonction POSIX sleep()
- System : rajout d'une fonction de configuration du timer 0 pour qu'il ait une période de 50ms
- System : rajout du syscall TimerSleep() pour pouvoir gérer facilement la fonction sleep()
- Libraries : le fichier System.h a été déplacé dans le dossier System, ce qui paraît plus logique

18/12/2013 :
- suppression de la bibliothèque Console, rajout de la bibliothèque Keyboard

19/01/2014 :
- System : conception de la machine d'état gérant l'affichage dans la console système et ajout de cette machine dans la documentation
- utilisation d'une nouvelle nomenclature pour les numéros de version qui permet de trier automatiquement par date
- Sustem : implémentation de la machine d'états et modifs mineures sur d'autres fonctions de Driver_Screen pour plus de cohérence
- Libraries : bugfix sur gets()

26/04/2014 :
- System : regroupement des fichiers header du système dans un dossier Includes
  # les inclusions dans les fichiers sont maintenant regroupées par ordre alphabétique
- System : ajout des fichiers Driver_PIC.c et Driver_PIC.h
- System / Installer : modification du code du système pour pouvoir réutiliser le plus de sources du système dans l'installateur
  # ajout de 2 #ifdef INSTALLER dans le code du kernel et du système de fichiers 
  # déplacement du code de la fonction générant les partitions dans les sources du système
- Installer : mise à jour de ConvertisseurFichierHexa
  # portage de ConvertisseurFichierHexa en Binaries_To_Header_Converter
  # compilation automatique de Binaries_To_Header_Converter par le Makefile si l'exécutable est introuvable
  # création d'un répertoire Tools pour y mettre Binaries_To_Header_Converter (source et exécutable)

27/04/2014 :
- Installer : modification de Binaries_To_Header_Converter qu'il génère des structures de données plus complètes dans le but d'automatiser la tâche de création de fichiers sur le nouveau système de fichiers
- Installer : écriture du code spécifique de l'installateur dans la fonction Shell de l'installateur
- System : rajout de #ifndef INSTALLER dans le driver du clavier pour désactiver la touche F12 dans l'installateur
- suppression du MBR de l'installateur pour utiliser celui du système
  # rajout d'un -D dans le makefile pour spécifier le nombre de secteurs à charger

28/04/2014 :
- suppression du dossier .git situé dans le dossier racine
- Applications : rajout d'un dossier Tools qui contiendra des fichiers .mk regroupant les règles partagées par les makefiles de chaque application
- Libraries :
  # réorganisation des sources dans des dossiers Sources et Includes
  # les binaires (bibliothèque et point d'entrée) se trouveront désormais dans un dossier Binaries
  # réécriture du Makefile pour prendre en compte les changements précédents (organisation par ordre alphabétique)

29/04/2014 :
- Libraries : suppression du fichier ESILOS.h, il faudra désormais utiliser System.h
- portage de l'application Rain vers le nouveau système de build

02/05/2014 :
- Applications : début de la création d'un makefile racine qui permettra de compiler toutes les applications en une fois mais aussi de compiler chaque application séparément
- rajout de System_Program_Entry_Point.o dans l'archive des Libraries et d'une section dans le linker script des applications pour éviter d'avoir le .o à linker manuellement

03/05/2014 :
- suite Makefile racine Applications
- renommage de tout le système en Lemon
  # renommage des images de CD et de disquette générées par l'installeur et le système en ajoutant "Lemon" devant
  # les variables de langue se nomment désormais LEMON_LANGUAGE_XXX
- réorganisation de la partie Applications
- portage de toutes les applications vers la nouvelle organisation et le nouveau système de build
- passage de la langue à compiler en tant que define dans la variable CCFLAGS (plus simple que de rajouter des règles spécifiques dans tous les makefiles concernés)

05/05/2014 :
- System : début rajout du fichier de configuration globale du système (fichier partagé aussi par l'installateur)
- System : déplacement de constantes en rapport avec la MMU (et autres) situées dans Kernel.h vers Kernel.c
- System : suppression des macros VALUE_TO_STRING et MACRO_TO_STRING, le code assembleur les utilisant a été remplacé par de l'assembleur gcc
- System : nettoyage des handlers d'interruptions

06/05/2014 :
- System : optimisation du système de fichiers (utilisation de tableaux pour représenter les structures du système de fichiers)
  # intégration des constantes de Configuration.h au sein du système de fichiers

07/05/2014 :
- System : mise à jour de la fonction FileSystemCreate()
- Installer : correction d'un bug dans le calcul du nombre de fichiers à installer

10/05/2014 :
- création du programme "Game of Life"

11/05/2014 :
- recherche du bug empêchant le système de démarrer sur Pentium 4 ou Core i7
  # la general protection fault apparaît au moment où les interruptions sont activées (exécution de sti)
  # il fallait que les registres de segment fs et gs soient proprement initialisés en pointant sur le descripteur de données du kernel
  # l'installeur boote désormais sur le Pentium 4 (non testé sur le i7), mais le clavier est très lent à réagir et l'accès au disque dur ne semble pas fonctionner
- System : rajout d'un handler d'interruption pour gérer la division par zéro
- Applications : rajout du test de la division par zéro dans l'application Test_Protection_Check
- System : optimisation des lanceurs de handlers d'interruption (inutile de sauver les registres utilisateur sur la stack si c'est pour la réinitialiser juste après)
- System : optimisation du code d'initialisation du système

12/05/2014 :
- System : déplacement des fonctions liées à la MMU et la commutation de tâches vers le module Memory_Protection créé pour l'occasion
- System : ajout du module Interrupt_Handlers qui contient tous les handlers d'interruptions

13/05/2014 :
- System : renommage de Memory_Protection en Architecture
  # les launchers d'interruptions sont maintenant dans Architecture
- System : fusion du contenu de Hardware_Functions dans Architecture
  # inb() et outb() sont maintenant des macros
- System : suppression des dépendances dans le makefile car il faut de toute façon recompiler entièrement le système à chaque fois
  # la cible "clean" est automatiquement appelée par la règle "all"
- System : déplacement de la constante KERNEL_TOTAL_RAM_SIZE_MEGA_BYTES dans le fichier Configuration.h
- System : suppression du module Interrupt_Handlers car les handlers restent dans le kernel
- System : la fonction KernelEntryPoint() est maintenant dans la section .init, modification du linker script en conséquence
- Libraries : amélioration de la définition de la section de la fonction _start()
- Installer : modification du makefile pour prendre en compte les nouvelles modifications et abandon des dépendances
- System : déplacement de la fonction IODelay() (dans Hardware_Functions) en ArchitectureIODelay() (dans Architecture)

14/05/2014 :
- Libraries : création du wrapper pour l'appel système ScreenDisplayBuffer()
- début d'un projet annexe par Bastien BRUNNENSTEIN : création d'une bibliothèque d'affichage pour la console (Pulp)

15/05/2014 :
- Applications : création d'un programme de test affichant tous les caractères ASCII
- Libraries : ajout de la macro SCREEN_MAKE_COLOR()

17/05/2014 :
- ajout de "make sdk" au Makefile principal
- modification de l'include <System_Calls.h> dans Libraries et dans le makefile principal d'Applications pour ne pas avoir à créer l'arborescence System dans le SDK, il suffira de copier System_Calls.h dans Libraries
- début réécriture du manuel utilisateur en anglais

18/05/2014 :
- suite réécriture du manuel utilisateur

19/05/2014 :
- fin création wrapper

20/05/2014 :
- changement du type "char *" du pointeur du buffer du syscall d'affichage direct en mémoire vidéo par "unsigned char *" partout où c'était nécessaire
- System : le nombre maximum de fichiers ouverts simultanément est maintenant paramétrable depuis le fichier Configuration.h
- System : fix d'un bug sur la fonction d'affichage ScreenWriteChar() qui n'affichait pas en totalité une chaîne plus longue que le nombre de colonnes de l'écran lorsqu'elle était scrollée
- System : début réécriture FileWrite()

24/05/2014 :
- System :
  # fin écriture FileWrite()
  # débogage FileRead()
- Applications : portage de l'ancienne version de Text_Viewer
- Applications : modification des tests
  # ajout du test FileRead() / FileWrite()
  # suppression du fichier Test_File_Read_Checksum.c

26/05/2014 :
- System : déplacement de FILE_NAME_LENGTH dans Configuration.h
- System : attribution de 128 secteurs au kernel (au lieu de 30), ce qui permet 64 Ko de code

01/06/2014 :
- System : ajout d'un define "DEBUG" dans le code du MBR pour afficher le nombre de secteurs par piste et de têtes du périphérique de boot

02/06/2014 :
- ajout de OUTPUT_ARCH(i386) dans tous les linker scripts pour permettre la compilation sur un système 64 bits
- modification des makefiles pour rendre possible la compilation sur un système 64 bits et rajout de -m32 sur les lignes de commande de gcc
- suppression des inline assez "particuliers" pour satisfaire gcc
- rajout de flags d'optimisation pour inliner les fonctions appelées une seule fois

07/06/2014 :
- Applications : suppression d'une règle de Makefile devenue inutile
- Applications : optimisation et ajout de la possibilité de remonter dans le texte pour le programme Text Viewer
- Installer : ajout de Text Viewer dans les programmes installés
- System : optimisation légère dans le handler des interruptions système
- utilisation d'un enum pour lister les appels système et suppression des groupes d'appels système (jamais utilisés)
- System : passage à la version 2.1.4
- System : correction du bug de la commande "copy" (un fichier de plusieurs blocs était mal copié)

09/06/2014 :
- début création librarie C conforme à la norme ISO/IEC 9899:TC2, début codage librarie ctype

10/06/2014 :
- suite codage ctype

11/06/2014 :
- fin du codage de ctype et des tests correspondants

12/06/2014 :
- début du codage de assert()

13/06/2014 :
- fin du codage de assert()
- ajout de errno
- initialisation de errno à zéro dans _start()

16/06/2014 :
- Applications : ajout de la détection des oscillateurs et d'un monde stable dans le programme Game Of Life

17/06/2014 :
- Applications : optimisation de Game Of Life (détection de tous les oscillateurs composés de deux états), ajout de la possibilité de choisir la vitesse d'affichage

22/06/2014 :
- modification du MBR pour qu'il accède directement au contrôleur IDE lorsque le système boot depuis un disque dur
- Lemon fonctionne parfaitement sur les systèmes suivants :
  # notebook Toshiba (486DX4)
  # tour MS Computer (Pentium MMX)
- Lemon ne fonctionne pas encore correctement sur le Pentium 4 (le système s'installe et se lance, mais certains programmes génèrent de gros bugs, tels qu'un débordement de la pile noyau)

06/07/2014 :
- début du portage de la Newlib 2.1.0 en remplacement de l'ébauche de libc déjà écrite
  # il est possible de compiler des programmes et de les linker
  # les wrappers pour read() et write() permettent de lire le clavier et d'écrire à l'écran

09/07/2014 :
- System : modification de l'appel système SYSTEM_CALL_SCREEN_WRITE_STRING pour écrire un nombre précis de caractères. Ceci permet d'utiliser ce syscall dans le wrapper de write() de la Newlib

19/07/2014 :
- Libraries :
  # ajout du wrapper pour open()
  # finalisation du wrapper read()
  # ajout de KeyboardReadChar() pour lire directement une touche
- modification du code de chargement depuis une disquette MBR pour qu'il puisse charger plus de 64Ko
- portage de toutes les applications sous la Newlib